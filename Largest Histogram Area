import java.util.*;
import java.lang.*;
import java.io.*;

class Main {
    
    
	public static void main (String[] args) throws IOException {
	BufferedReader br = new BufferedReader(new InputStreamReader(System.in));	
        long n = Long.parseLong(br.readLine().trim());
        String inputLine[] = br.readLine().trim().split(" ");
        long[] arr = new long[(int)n];
        for(int i=0; i<n; i++)arr[i]=Long.parseLong(inputLine[i]);
        System.out.println(new Solution().maximumArea(arr, n));
	}
}

class Solution
{
      public static long maximumArea(long arr[], long m){
        int ans=0;
         int n=(int)m;
        int rightSmallerELE[]=new int[n];
        Stack<Integer> st=new Stack<>();
        for(int i=n-1;i>=0;i--){
            while(st.size()>0){
                if(arr[st.peek()]<arr[i]){
                    rightSmallerELE[i]=(int)st.peek();
                    break;
                }else{
                    st.pop();
                }
            }
            if(st.size()==0){
                rightSmallerELE[i]=n;
            }st.push(i);
        }
        int leftSmallerELE[]=new int[n];
        st=new Stack<>();
        for(int i=0;i<n;i++){
            while(st.size()>0){
                if(arr[st.peek()]<arr[i]){
                    leftSmallerELE[i]=st.peek();
                    break;
                }else{
                    st.pop();
                }
            }
            if(st.size()==0){
                leftSmallerELE[i]=-1;
            }
            st.push(i);
        }
        for(int i=0;i<n;i++){
            int t=(int)arr[i]*(rightSmallerELE[i]-leftSmallerELE[i]-1);
            if(t>ans){
                ans=t;
            }
        }
        return (long)ans;
    }
}
